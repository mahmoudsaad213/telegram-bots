# database.py - ูุญุฏุซ ูุญู ูุดุงูู ุงูุงุชุตุงู
import psycopg2
from psycopg2.extras import RealDictCursor
import time
import sys

# ุงุณุชูุฑุงุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
try:
    from config import DATABASE_URL, DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD
except ImportError:
    print("โ ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช")
    sys.exit(1)

class Database:
    def __init__(self, max_retries=3, retry_delay=2):
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.conn = None
        self.cursor = None
        self.connect()

    def connect(self):
        """ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุน ุฅุนุงุฏุฉ ุงููุญุงููุฉ"""
        for attempt in range(1, self.max_retries + 1):
            try:
                print(f"๐ ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช (ุงููุญุงููุฉ {attempt}/{self.max_retries})")
                
                # ุงุณุชุฎุฏุงู DATABASE_URL ุฅุฐุง ูุงู ูุชููุฑุงู (ุงูุทุฑููุฉ ุงูููุถูุฉ ูู Railway)
                if 'DATABASE_URL' in globals() and DATABASE_URL:
                    print("๐ ุงูุงุชุตุงู ุจุงุณุชุฎุฏุงู DATABASE_URL")
                    self.conn = psycopg2.connect(DATABASE_URL)
                else:
                    print("๐ ุงูุงุชุตุงู ุจุงุณุชุฎุฏุงู ุงูุจูุงูุงุช ุงููููุตูุฉ")
                    self.conn = psycopg2.connect(
                        host=DB_HOST,
                        port=DB_PORT,
                        dbname=DB_NAME,
                        user=DB_USER,
                        password=DB_PASSWORD,
                        sslmode='require'  # ูุทููุจ ููุงุชุตุงู ุงูุขูู ูุน Railway
                    )
                
                # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
                self.conn.set_session(autocommit=False)
                self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
                
                # ุงุฎุชุจุงุฑ ุจุณูุท ููุงุชุตุงู
                self.cursor.execute("SELECT 1")
                self.cursor.fetchone()
                
                print("โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ")
                self.create_tables()
                return
                
            except psycopg2.OperationalError as e:
                print(f"โ ูุดู ุงูุงุชุตุงู (ุงููุญุงููุฉ {attempt}): {e}")
                if attempt < self.max_retries:
                    print(f"โณ ุงูุชุธุงุฑ {self.retry_delay} ุซุงููุฉ ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ...")
                    time.sleep(self.retry_delay)
                else:
                    print("โ ูุดู ูู ุฌููุน ูุญุงููุงุช ุงูุงุชุตุงู")
                    raise Exception(f"ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุนุฏ {self.max_retries} ูุญุงููุงุช: {e}")
            
            except Exception as e:
                print(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
                raise

    def create_tables(self):
        """ุฅูุดุงุก ุงูุฌุฏุงูู ุงููุทููุจุฉ"""
        try:
            print("๐ง ุฅูุดุงุก ุงูุฌุฏุงูู...")
            
            # ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username TEXT,
                    subscription_type TEXT,
                    subscription_start TIMESTAMP,
                    subscription_end TIMESTAMP,
                    is_active BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # ุฅูุดุงุก ุฌุฏูู ุงููููุจููุงุช
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS combos (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    combo TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # ุฅูุดุงุก ุฌุฏูู ุงูุฃุนูุงู
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS businesses (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    business_name TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # ุฅูุดุงุก ููุงุฑุณ ูุชุญุณูู ุงูุฃุฏุงุก
            self.cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
                CREATE INDEX IF NOT EXISTS idx_combos_user_id ON combos(user_id);
                CREATE INDEX IF NOT EXISTS idx_businesses_user_id ON businesses(user_id);
            """)
            
            self.conn.commit()
            print("โ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ุจูุฌุงุญ")
            
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฌุฏุงูู: {e}")
            self.conn.rollback()
            raise

    def execute_with_retry(self, query, params=None, fetch=False):
        """ุชูููุฐ ุงุณุชุนูุงู ูุน ุฅุนุงุฏุฉ ุงููุญุงููุฉ ูู ุญุงูุฉ ุงููุทุงุน ุงูุงุชุตุงู"""
        for attempt in range(1, 3):  # ูุญุงููุชุงู ููุท ููุงุณุชุนูุงูุงุช
            try:
                if params:
                    self.cursor.execute(query, params)
                else:
                    self.cursor.execute(query)
                
                if fetch:
                    if 'fetchall' in str(fetch):
                        return self.cursor.fetchall()
                    else:
                        return self.cursor.fetchone()
                
                self.conn.commit()
                return True
                
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                print(f"โ ุงููุทุน ุงูุงุชุตุงูุ ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู... (ุงููุญุงููุฉ {attempt})")
                if attempt < 2:
                    try:
                        self.connect()  # ุฅุนุงุฏุฉ ุงูุงุชุตุงู
                    except:
                        pass
                else:
                    raise e
            except Exception as e:
                self.conn.rollback()
                raise e

    def add_user(self, telegram_id, username):
        """ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ"""
        try:
            query = """
                INSERT INTO users (telegram_id, username)
                VALUES (%s, %s)
                ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username
            """
            self.execute_with_retry(query, (telegram_id, username))
            print(f"โ ุชู ุฅุถุงูุฉ/ุชุญุฏูุซ ุงููุณุชุฎุฏู {telegram_id}")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููุณุชุฎุฏู {telegram_id}: {e}")

    def get_user(self, telegram_id):
        """ุงูุญุตูู ุนูู ุจูุงูุงุช ุงููุณุชุฎุฏู"""
        try:
            query = "SELECT * FROM users WHERE telegram_id = %s"
            return self.execute_with_retry(query, (telegram_id,), fetch=True)
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงููุณุชุฎุฏู {telegram_id}: {e}")
            return None

    def add_combo(self, user_id, combo):
        """ุฅุถุงูุฉ ูููุจู ุฌุฏูุฏ"""
        try:
            query = "INSERT INTO combos (user_id, combo) VALUES (%s, %s)"
            self.execute_with_retry(query, (user_id, combo))
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงููููุจู: {e}")

    def get_combos(self, user_id):
        """ุงูุญุตูู ุนูู ูููุจููุงุช ุงููุณุชุฎุฏู"""
        try:
            query = "SELECT * FROM combos WHERE user_id = %s"
            return self.execute_with_retry(query, (user_id,), fetch='fetchall') or []
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงููููุจููุงุช: {e}")
            return []

    def add_business(self, user_id, business_name):
        """ุฅุถุงูุฉ ุนูู ุฌุฏูุฏ"""
        try:
            query = "INSERT INTO businesses (user_id, business_name) VALUES (%s, %s)"
            self.execute_with_retry(query, (user_id, business_name))
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูุนูู: {e}")

    def get_businesses(self, user_id):
        """ุงูุญุตูู ุนูู ุฃุนูุงู ุงููุณุชุฎุฏู"""
        try:
            query = "SELECT * FROM businesses WHERE user_id = %s ORDER BY created_at DESC"
            return self.execute_with_retry(query, (user_id,), fetch='fetchall') or []
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงูุฃุนูุงู: {e}")
            return []

    def get_all_users(self):
        """ุงูุญุตูู ุนูู ุฌููุน ุงููุณุชุฎุฏููู (ูููุฏูุฑ)"""
        try:
            query = "SELECT * FROM users ORDER BY created_at DESC"
            return self.execute_with_retry(query, fetch='fetchall') or []
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงููุณุชุฎุฏููู: {e}")
            return []

    def activate_subscription(self, telegram_id, sub_type, duration_days):
        """ุชูุนูู ุงุดุชุฑุงู ุงููุณุชุฎุฏู"""
        try:
            query = """
                UPDATE users
                SET subscription_type = %s,
                    subscription_start = CURRENT_TIMESTAMP,
                    subscription_end = CURRENT_TIMESTAMP + INTERVAL '%s days',
                    is_active = TRUE
                WHERE telegram_id = %s
            """
            self.execute_with_retry(query, (sub_type, duration_days, telegram_id))
            print(f"โ ุชู ุชูุนูู ุงุดุชุฑุงู {sub_type} ูููุณุชุฎุฏู {telegram_id}")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุชูุนูู ุงูุงุดุชุฑุงู: {e}")

    def check_subscription_status(self):
        """ูุญุต ูุชุญุฏูุซ ุญุงูุฉ ุงูุงุดุชุฑุงูุงุช ุงูููุชููุฉ"""
        try:
            query = """
                UPDATE users 
                SET is_active = FALSE 
                WHERE subscription_end < CURRENT_TIMESTAMP AND is_active = TRUE
            """
            self.execute_with_retry(query)
            print("โ ุชู ูุญุต ูุชุญุฏูุซ ุญุงูุฉ ุงูุงุดุชุฑุงูุงุช")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ูุญุต ุงูุงุดุชุฑุงูุงุช: {e}")

    def close(self):
        """ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"""
        try:
            if self.cursor:
                self.cursor.close()
            if self.conn:
                self.conn.close()
            print("โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฅุบูุงู ุงูุงุชุตุงู: {e}")

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
